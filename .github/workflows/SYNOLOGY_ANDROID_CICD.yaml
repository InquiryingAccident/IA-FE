name: PLANE-ACCIDENT-FINDER-FRONTEND

on:
  push:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ANDROID_BUILD_TOOLS_VERSION: 35.0.0
      ANDROID_COMPILE_SDK: 35
      ANDROID_TARGET_SDK: 34
      ANDROID_MIN_SDK: 24
      ANDROID_NDK_VERSION: 27.1.12297006
      KOTLIN_VERSION: 2.0.21
      TZ: Asia/Seoul  # 서울 시간대
    steps:
      # 1) 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Node.js / NPM 설정 (노드 캐시 활용)
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      # 3) .env 파일 생성
      - name: Create .env file from secret
        run: echo "${{ secrets.ENV }}" > .env

      # 4) 프로젝트 종속성 설치
      - name: Install Node dependencies
        run: npm install

      # 5) 추가 패키지 설치 (sshpass, jq)
      - name: Install additional dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass jq

      # 6) Android SDK 환경 변수 설정
      - name: Setup Android SDK Environment Variables
        run: |
          echo "ANDROID_BUILD_TOOLS_VERSION=$ANDROID_BUILD_TOOLS_VERSION" >> $GITHUB_ENV
          echo "ANDROID_COMPILE_SDK=$ANDROID_COMPILE_SDK" >> $GITHUB_ENV
          echo "ANDROID_TARGET_SDK=$ANDROID_TARGET_SDK" >> $GITHUB_ENV
          echo "ANDROID_MIN_SDK=$ANDROID_MIN_SDK" >> $GITHUB_ENV
          echo "ANDROID_NDK_VERSION=$ANDROID_NDK_VERSION" >> $GITHUB_ENV

      # 7) JDK 17 설정 (Gradle 캐시 포함)
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # 8) gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x android/gradlew

      # 9) debug.keystore 생성/저장 (Base64 디코딩)
      - name: Decode and save debug.keystore
        run: |
          mkdir -p android/app
          echo "${{ secrets.DEBUG_KEYSTORE_BASE64 }}" | base64 --decode > android/app/debug.keystore

      # 10) React Native APK 빌드 (Release)
      - name: Build React Native APK
        working-directory: android
        run: ./gradlew assembleRelease

      # 11) 빌드된 APK 파일 이름 변경  
      - name: Rename APK file
        run: |
          SHORT_COMMIT_HASH=$(git rev-parse --short HEAD)
          APK_SOURCE="android/app/build/outputs/apk/release/app-release.apk"
          APK_TARGET="android/app/build/outputs/PAF-${SHORT_COMMIT_HASH}.apk"
          if [ -f "$APK_SOURCE" ]; then
            mv "$APK_SOURCE" "$APK_TARGET"
          else
            echo "APK source file not found: $APK_SOURCE"
            exit 1
          fi

      # 12) 로컬에 JSON 파일(plane-accident-finder-cicd-history.json) 생성(없으면 생성)
      - name: Ensure plane-accident-finder-cicd-history.json exists
        run: |
          JSON_PATH="android/app/build/outputs/plane-accident-finder-cicd-history.json"
          mkdir -p "$(dirname "$JSON_PATH")"
          if [ ! -f "$JSON_PATH" ]; then
            echo '{"files": []}' > "$JSON_PATH"
          fi

      # 13) NAS에서 기존 JSON 다운로드 시도 (FTP 사용, 실패 시 로컬 파일 유지)
      - name: Download or initialize JSON file from Synology NAS via FTP
        env:
          WEB_FTP_USERNAME: ${{ secrets.WEB_FTP_USERNAME }}
          WEB_FTP_PASSWORD: ${{ secrets.WEB_FTP_PASSWORD }}
        run: |
          JSON_PATH="android/app/build/outputs/plane-accident-finder-cicd-history.json"
          FTP_URL="ftp://suh-project.synology.me/plane-accident-finder/downloads/plane-accident-finder-cicd-history.json"
          
          echo "Attempting to download JSON from NAS via FTP..."
          if curl "$FTP_URL" --user "$WEB_FTP_USERNAME:$WEB_FTP_PASSWORD" --ftp-pasv -o "$JSON_PATH"; then
            echo "Successfully downloaded JSON from NAS:"
            cat "$JSON_PATH"
          else
            echo "No existing JSON on NAS or download failed. Using local file."
          fi

      # 14) JSON 파일 업데이트 (빌드 정보 추가)
      - name: Update JSON file with build info
        run: |
          set -e
          FULL_COMMIT_HASH=$(git rev-parse HEAD)
          SHORT_COMMIT_HASH=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y-%m-%d %H:%M')
          APK_NAME="PAF-${SHORT_COMMIT_HASH}.apk"
          FILE_PATH="android/app/build/outputs/${APK_NAME}"
          FILE_SIZE=$(stat -c%s "$FILE_PATH")
          JSON_PATH="android/app/build/outputs/plane-accident-finder-cicd-history.json"
          COMMIT_LINK="https://github.com/${GITHUB_REPOSITORY}/commit/${FULL_COMMIT_HASH}"
          
          UPDATED_JSON=$(jq --arg apk_name "$APK_NAME" \
                            --arg file_size "$FILE_SIZE" \
                            --arg build_date "$DATE" \
                            --arg commit_link "$COMMIT_LINK" \
                            --arg full_commit_hash "$FULL_COMMIT_HASH" \
            '.files += [{"apk_name": $apk_name, "file_size": $file_size, "build_date": $build_date, "commit_link": $commit_link, "full_commit_hash": $full_commit_hash}]' \
            "$JSON_PATH")
          
          echo "$UPDATED_JSON" > "$JSON_PATH"
          echo "Updated JSON file:"
          cat "$JSON_PATH"

      # 15) 빌드 결과물(APK 및 JSON) 업로드 (Artifact)
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plane-accident-finder
          path: |
            android/app/build/outputs/PAF-*.apk
            android/app/build/outputs/plane-accident-finder-cicd-history.json

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass curl

      # 1) 아티팩트 다운로드
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: plane-accident-finder
          path: android/app/build/outputs/

      # 2) 디렉토리 구조 확인 (디버그용)
      - name: List downloaded structure
        run: ls -alR android/app/build/outputs

      # 3) JSON 파일 검증
      - name: Verify JSON file
        run: cat android/app/build/outputs/plane-accident-finder-cicd-history.json

      # 4) FTP를 사용하여 Synology NAS에 파일 업로드 (FTP URL 형식 사용)
      - name: Upload files to Synology NAS via FTP
        env:
          WEB_FTP_USERNAME: ${{ secrets.WEB_FTP_USERNAME }}
          WEB_FTP_PASSWORD: ${{ secrets.WEB_FTP_PASSWORD }}
        run: |
          # FTP 서버 기본 경로는 다음과 같습니다.
          FTP_URL="ftp://suh-project.synology.me/plane-accident-finder/downloads/"
          
          echo "Uploading debug.keystore..."
          curl -T "android/app/debug.keystore" "$FTP_URL" --user "$WEB_FTP_USERNAME:$WEB_FTP_PASSWORD" --ftp-create-dirs --ftp-pasv
          
          echo "Uploading APK file..."
          curl -T android/app/build/outputs/PAF-*.apk "$FTP_URL" --user "$WEB_FTP_USERNAME:$WEB_FTP_PASSWORD" --ftp-create-dirs --ftp-pasv
          
          echo "Uploading JSON file..."
          curl -T android/app/build/outputs/plane-accident-finder-cicd-history.json "$FTP_URL" --user "$WEB_FTP_USERNAME:$WEB_FTP_PASSWORD" --ftp-create-dirs --ftp-pasv
          
          # 5) FTP 업로드가 완료된 후, 서버의 JSON 파일 내용을 확인 (디버그용)
          echo "Verifying uploaded JSON file..."
          curl "$FTP_URL/plane-accident-finder-cicd-history.json" --user "$WEB_FTP_USERNAME:$WEB_FTP_PASSWORD"
